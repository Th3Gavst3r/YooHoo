const { expect } = require('chai');
const proxyquire = require('proxyquire').noCallThru();
const sinon = require('sinon');

describe('getConnectionUrl()', () => {
  it('returns the url generated by googleapis', () => {
    const authUrl = 'www.example.com';
    const clientId = 'test client id';
    const clientSecret = 'test client secret';
    const port = 1234;
    process.env.CLIENT_ID = clientId;
    process.env.CLIENT_SECRET = clientSecret;
    process.env.PORT = port;

    const auth = {
      generateAuthUrl: sinon.stub().returns(authUrl),
    };
    const OAuth2 = sinon
      .stub()
      .withArgs(clientId, clientSecret, `http://127.0.0.1:${port}/callback`)
      .returns(auth);

    const googleUtils = proxyquire('./google-utils.js', {
      googleapis: {
        google: {
          auth: {
            OAuth2: OAuth2,
          },
        },
      },
    });

    const url = googleUtils.getConnectionUrl();

    sinon.assert.calledOnce(auth.generateAuthUrl);
    expect(url).to.equal(authUrl);
  });
});

describe('setTokens()', () => {
  it('uses the authCode to set access and refresh tokens', async () => {
    const data = { tokens: { token1: 'awef', token2: '1234' } };
    const clientId = 'test client id';
    const clientSecret = 'test client secret';
    const port = 1234;
    process.env.CLIENT_ID = clientId;
    process.env.CLIENT_SECRET = clientSecret;
    process.env.PORT = port;

    const auth = {
      getToken: sinon.stub().resolves(data),
      setCredentials: sinon.stub(),
    };
    const OAuth2 = sinon
      .stub()
      .withArgs(clientId, clientSecret, `http://127.0.0.1:${port}/callback`)
      .returns(auth);

    const googleUtils = proxyquire('./google-utils.js', {
      googleapis: {
        google: {
          auth: {
            OAuth2: OAuth2,
          },
        },
      },
    });

    await googleUtils.setTokens();

    sinon.assert.calledOnce(auth.getToken);
    sinon.assert.calledOnce(auth.setCredentials);
    sinon.assert.calledOnceWithExactly(auth.setCredentials, data.tokens);
  });
});

describe('insertVideo', () => {
  it('calls the youtube api with input video and playlist ids', async () => {
    const videoId = 'testvideoid';
    const playlistId = 'testplaylistid';

    const auth = sinon.stub();
    const data = { res: 'data' };
    const insert = sinon.stub().resolves(data);
    const youtube = sinon.stub().returns({
      playlistItems: {
        insert: insert,
      },
    });
    const googleUtils = proxyquire('./google-utils.js', {
      googleapis: {
        google: {
          auth: {
            OAuth2: sinon.stub().returns(auth),
          },
          youtube: youtube,
        },
      },
    });

    const response = await googleUtils.insertVideo(videoId, playlistId);

    expect(response).to.equal(data);
    sinon.assert.calledOnceWithExactly(youtube, { version: 'v3', auth: auth });
    sinon.assert.calledOnceWithExactly(insert, {
      part: 'snippet',
      resource: {
        snippet: {
          playlistId,
          position: 0,
          resourceId: {
            kind: 'youtube#video',
            videoId,
          },
        },
      },
    });
  });
});
